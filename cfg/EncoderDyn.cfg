#!/usr/bin/env python2
# -*- coding: UTF-8 -*-
PACKAGE = "ffmpeg_image_transport"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()


# encoder options
encode_enum = gen.enum([gen.const("h264_nvenc", str_t, "h264_nvenc",    "h264_nvenc"),
                        gen.const("hevc_nvenc", str_t, "hevc_nvenc",    "hevc_nvenc"),
                        gen.const("libx264",    str_t, "libx264",       "libx264")],
                       "An enum to set the encoder")
gen.add("encoder", str_t, 0, "encoding method", "h264_nvenc", edit_method=encode_enum)


profile_enum = gen.enum([gen.const("baseline",  str_t, "baseline",  "h264_nvenc"), 
                         gen.const("main",      str_t, "main",      "h264_nvenc, hevc_nvenc"),
                         gen.const("main10",    str_t, "main10",                "hevc_nvenc"),
                         gen.const("rext",      str_t, "rext",                  "hevc_nvenc"),
                         gen.const("high",      str_t, "high",      "h264_nvenc")], 
                         "An enum to set the profile")
gen.add("profile", str_t, 0, "profile", "main", edit_method=profile_enum)

preset_enum = gen.enum([gen.const("slow",       str_t, "slow",      "libx264"),
                        gen.const("medium",     str_t, "medium",    "libx264"),
                        gen.const("fast",       str_t, "fast",      "libx264"),
                        gen.const("hp",         str_t, "hp", "hp"),
                        gen.const("hq",         str_t, "hq", "hq"),
                        gen.const("bd",         str_t, "bd", "bd"),
                        gen.const("ll",         str_t, "ll", "low latency"),
                        gen.const("llhq",       str_t, "llhq", "low latency hq"),
                        gen.const("llhp",       str_t, "llhp", "low latency hp"),
                        gen.const("lossless",   str_t, "lossless", "lossless"),
                        gen.const("losslesshp", str_t, "losslesshp", "lossless hp")],
                        "An enum to set the preset")
gen.add("preset", str_t, 0, "preset", "slow", edit_method=preset_enum)

"""
----------------------------------------
ffmpeg args
----------------------------------------
h264_nvenc
  -profile          <int>   Set the encoding profile (from 0 to 3) (default main)
     baseline       0
     main           1
     high           2
     #high444p       3
  -preset           <int>   Set the encoding preset (from 0 to 18) (default medium)
     slow           1       hq 2 passes
     medium         2       hq 1 pass
     fast           3       hp 1 pass
     hp             4
     hq             5
     bd             6
     ll             7       low latency
     llhq           8       low latency hq
     llhp           9       low latency hp
     lossless       10
     losslesshp     11
  -others:
    priority: high -> low
        -qp     <integer>   -1, 0, 51
            Constant quantization parameter rate control method (from -1 to 51) (default -1)
        -cq     <float>     0, 0, 51
            Set target quality level (0 to 51, 0 means automatic) for constant quality mode in VBR rate control (from 0 to 51) (default 0)
        -b:v    <integer>   0, 0, INT_MAX, (0: unknow; notset: 2000K)

libx264
  -profile:
    - baseline:
        --no-8x8dct --bframes 0 --no-cabac
        --cqm flat --weightp 0
        No interlaced.
        No lossless.
    - main:
        --no-8x8dct --cqm flat
        No lossless.
    - high:
        No lossless.
  -preset:
      - fast:
          --rc-lookahead 30 --ref 2 --subme 6
          --weightp 1
      - medium:
          Default settings apply.
      - slow:
          --direct auto --rc-lookahead 50 --ref 5
          --subme 8 --trellis 2
  -others:
    priority: high -> low
        crf mode:
            -crf:   will override -qp, -b:v
            -qmax:  limit the max qp
        qp mode:
            -qp: will override -b:v, -qmax
        abr mode:
            -b:v
            -qmax:  limit the max qp

        -qmax   <integer>   Max QP (0-81, 0=lossless) [81]  (default 51 in this ros cfg)
        -crf    <float>     Quality-based VBR (-12-51) [23]
        -qp     <integer>   Force constant QP (0-81, 0=lossless)
        -b:v    <integer>   Set bitrate (bit/s)

bitrate和QP都没有缺省值，一旦设置他们就表示要按照相应的码率控制方法进行编码，
CRF有缺省值23，没有任何关于编码控制的设置时就按照CRF缺省值23来编码。

一般的使用建议：
    CQP – 一般不推荐使用，在一些算法验证工作中会使用这种模式
    CRF – 适合在关注编码质量而输出文件大小或码率不是太紧要的场景下使用，一般网络压片使用CRF。
    1 pass ABR – 适用于流媒体或者目标码率受限的实时应用场景。
    2 pass VBR – 适用于有目标码率限制而又有时间可以进行二次编码的非实时应用。

----------------------------------------
rc_mode
----------------------------------------
abr ----- Average Bit Rate
    恒定平均目标码率。想要选择这种码率控制方法，必须先设置bitrate。
    X264中bitrate的单位是Kbps(K bit per second).

    bitrate

crf ----- Constant Rate Factor
    在优先保证画面质量（也不太在乎转码时间）的情况下，使用-crf参数来控制转码是比较适宜的。这个参数的取值范围为0~51，其中0为无损模式，数值越大，画质越差，生成的文件却越小。从主观上讲，18~28是一个合理的范围。18被认为是视觉无损的（从技术角度上看当然还是有损的），它的输出视频质量和输入视频相当

    Set the quality / size tradeoff for constant - quality(no bitrate target)and
    constrained - quality(with maximum bitrate target) modes.
    Valid range is 0 to 63, higher numbers indicating lower quality and smaller output size.
    Only used if set; by default only the bitrate target is used.
    codec   取值范围    默认值      建议值
    x264    [0, 51]     23      [18, 28]
    x265    [0, 51]     28
    VP9     [0, 63]     32      [15, 35]  31 is recommended for 1080p HD video

    和QP的范围一样RF的范围也是[0, 51]。其中0为无损模式，23为缺省，51质量最差。和QP一样的趋势。RF值加6，输出码率大概减少一半；减6，输出码率翻倍。
cqp ----- constant quantizer
    恒定QP. 无缺省值最简单的码率控制方式，每帧图像都按照一个特定的QP来编码，每帧编码后的数据量有多大是未知的。
    Set the quantizer used in cqp rate control mode(0 - 63).
    qp
"""

rc_mode_enum = gen.enum([gen.const("abr", str_t, "abr", "abr"),
                         gen.const("crf", str_t, "crf", "crf"),
                         gen.const("cqp", str_t, "cqp", "cqp")],
                        "An enum to set the rate control mode")
gen.add("rc_mode",  str_t, 0, "rc_mode", "abr", edit_method=rc_mode_enum)
gen.add("rc_value", int_t, 0, "crf/cqp. Default crf x264:23, x265:28.", 23, 0, 51)


# crf mode
# gen.add("crf", int_t, 0, "Default crf x264:23, x265:28.", -1, -1, 51)

# qp mode
# gen.add("qp", int_t, 0, "", -1, -1, 51)

gen.add("qmax",     int_t, 0, "maximum allowed quantization (=qpmax)", -1, -1, 51)

# abr mode
gen.add("bit_rate", int_t, 0, "bit_rate (Kbps: K bit per second)", 2000, -1, 10000)

gen.add("gop_size", int_t, 0, "gop_size [frames]", 15, 1, 128)
gen.add("zerolatency",          bool_t, 0, "Set 1 to indicate zero latency operation (no reordering delay)", True)
gen.add("measure_performance",  bool_t, 0, "measure performance", False)
gen.add("performance_interval", int_t,  0, "interval between perf printout [frames]", 175, 1, 100000)

exit(gen.generate(PACKAGE, "ffmpeg_image_transport", "EncoderDyn"))
